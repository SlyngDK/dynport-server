// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64
// +build arm64be armbe mips mips64 mips64p32 ppc64 s390 s390x sparc sparc64

package xdpnatforward

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type natforwardRemappingMap struct {
	Ifindex int32
	_       [4]byte
	Smac    uint64
	Dmac    uint64
	Ip      uint32
	Port    uint16
	_       [2]byte
}

type natforwardSettings struct {
	BpfNoNatCidr [10]struct {
		Ip      uint32
		Netmask uint32
	}
}

// loadNatforward returns the embedded CollectionSpec for natforward.
func loadNatforward() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_NatforwardBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load natforward: %w", err)
	}

	return spec, err
}

// loadNatforwardObjects loads natforward and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*natforwardObjects
//	*natforwardPrograms
//	*natforwardMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadNatforwardObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadNatforward()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// natforwardSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type natforwardSpecs struct {
	natforwardProgramSpecs
	natforwardMapSpecs
}

// natforwardSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type natforwardProgramSpecs struct {
	XdpNatForward *ebpf.ProgramSpec `ebpf:"xdp_nat_forward"`
}

// natforwardMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type natforwardMapSpecs struct {
	Destinations  *ebpf.MapSpec `ebpf:"destinations"`
	RxCnt         *ebpf.MapSpec `ebpf:"rx_cnt"`
	Settings      *ebpf.MapSpec `ebpf:"settings"`
	Sources       *ebpf.MapSpec `ebpf:"sources"`
	XdpStatsProto *ebpf.MapSpec `ebpf:"xdp_stats_proto"`
}

// natforwardObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadNatforwardObjects or ebpf.CollectionSpec.LoadAndAssign.
type natforwardObjects struct {
	natforwardPrograms
	natforwardMaps
}

func (o *natforwardObjects) Close() error {
	return _NatforwardClose(
		&o.natforwardPrograms,
		&o.natforwardMaps,
	)
}

// natforwardMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadNatforwardObjects or ebpf.CollectionSpec.LoadAndAssign.
type natforwardMaps struct {
	Destinations  *ebpf.Map `ebpf:"destinations"`
	RxCnt         *ebpf.Map `ebpf:"rx_cnt"`
	Settings      *ebpf.Map `ebpf:"settings"`
	Sources       *ebpf.Map `ebpf:"sources"`
	XdpStatsProto *ebpf.Map `ebpf:"xdp_stats_proto"`
}

func (m *natforwardMaps) Close() error {
	return _NatforwardClose(
		m.Destinations,
		m.RxCnt,
		m.Settings,
		m.Sources,
		m.XdpStatsProto,
	)
}

// natforwardPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadNatforwardObjects or ebpf.CollectionSpec.LoadAndAssign.
type natforwardPrograms struct {
	XdpNatForward *ebpf.Program `ebpf:"xdp_nat_forward"`
}

func (p *natforwardPrograms) Close() error {
	return _NatforwardClose(
		p.XdpNatForward,
	)
}

func _NatforwardClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed natforward_bpfeb.o
var _NatforwardBytes []byte
